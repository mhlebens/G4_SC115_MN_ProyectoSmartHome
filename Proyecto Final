import json

# Listas para almacenamiento en memoria
usuarios = []  
dispositivos = []
estadoDispositivos = []
casas = []
habitaciones = []
cerraduras = []
horarioDispositivos = []

# Cargar los usuarios desde un archivo al inicio
try:
    with open("usuarios.txt", "r") as archivo:
        usuarios = json.load(archivo)
except FileNotFoundError:
    pass  # Si el archivo no existe, simplemente seguimos con la lista vacía

def usuariosPreviamenteRegistrados():
    if usuarios:
        print("Usuarios registrados:")
        for usuario in usuarios:
            print(f"- {usuario['nombre']} ({usuario['correo']})")
    else:
        print("No hay usuarios registrados.")

def registro():
    nombre = input("Ingrese su nombre: ")
    correo = input("Ingrese su correo electrónico: ")
    pin = input("Ingrese su pin: ")
    
    return nombre, correo, pin

def registrar_usuario(usuarios):
    nombre, correo, pin = registro()

    # Verificar si el usuario ya está registrado
    if any(usuario['nombre'] == nombre or usuario['correo'] == correo for usuario in usuarios):
        print("El usuario ya está registrado.")
    else:
        usuarios.append({'nombre': nombre, 'correo': correo, 'pin': pin})
        with open("usuarios.txt", "w") as archivo:  # Guardar los usuarios en el archivo
            json.dump(usuarios, archivo)
        print("Usuario registrado con éxito.")

# Inicio de sesión
def inicioSesion(usuarios):
    usuariosPreviamenteRegistrados()

    if not usuarios:
        print("No hay usuarios registrados. Proceda a registrar un nuevo usuario.")
        registrar_usuario(usuarios)
    else:
        opcion = input("¿Desea iniciar sesión o registrar un nuevo usuario? (1: Iniciar sesión, 2: Registrar usuario): ")
        
        if opcion == '1':
            if not iniciar_sesion(usuarios):
                print("Nombre o PIN incorrecto.")
        elif opcion == '2':
            registrar_usuario(usuarios)
        else:
            print("Opción no válida.")

def iniciar_sesion(usuarios):
    nombre = input("Nombre: ")
    pin = input("PIN: ")

    # Verificar si las credenciales coinciden
    for usuario in usuarios:
        if usuario['nombre'] == nombre and usuario['pin'] == pin:
            print("Inicio de sesión exitoso.")
            return True
        
    return False

# Función para actualizar el PIN
def actualizar_pin():
    nombre = input("Ingrese su nombre: ")
    pin_actual = input("Ingrese su PIN actual: ")

    for usuario in usuarios:
        if usuario['nombre'] == nombre and usuario['pin'] == pin_actual:
            nuevo_pin = input("Ingrese el nuevo PIN: ")
            usuario['pin'] = nuevo_pin
            with open("usuarios.txt", "w") as archivo:  # Actualizar el archivo de usuarios
                json.dump(usuarios, archivo)
            print("PIN actualizado con éxito.")
            return
        
    print("Nombre o PIN incorrecto. No se pudo actualizar el PIN.")

# Funciones relacionadas con las casas

def gestionar_casas():
    while True:
        print("\nGestión de Casas")
        print("1. Mostrar casas")
        print("2. Registrar nueva casa")
        print("3. Volver al menú principal")
        
        opcion = input("Seleccione una opción: ")

        if opcion == '1':
            if casas:
                print("Casas registradas:")
                for casa in casas:
                    print(f"- {casa}")
            else:
                print("No hay casas registradas.")
        
        elif opcion == '2':
            nombre_casa = input("Ingrese el nombre de la nueva casa: ")
            if nombre_casa in casas:
                print("Esta casa ya está registrada.")
            else:
                casas.append(nombre_casa)
                habitaciones.append([])  # Crear una lista vacía de habitaciones para esa casa
                print(f"Casa '{nombre_casa}' registrada exitosamente.")
        
        elif opcion == '3':
            break
        
        else:
            print("Opción no válida. Inténtelo de nuevo.")

# Funciones relacionadas con las habitaciones

def gestionar_habitaciones():
    while True:
        print("\nGestión de Habitaciones")
        print("1. Mostrar habitaciones de una casa")
        print("2. Registrar nueva habitación en una casa")
        print("3. Volver al menú principal")
        
        opcion = input("Seleccione una opción: ")

        if opcion == '1':
            nombre_casa = input("Ingrese el nombre de la casa: ")
            if nombre_casa in casas:
                indice_casa = casas.index(nombre_casa)
                if habitaciones[indice_casa]:
                    print(f"Habitaciones en la casa '{nombre_casa}':")
                    for habitacion in habitaciones[indice_casa]:
                        print(f"- {habitacion}")
                else:
                    print(f"La casa '{nombre_casa}' no tiene habitaciones registradas.")
            else:
                print("La casa no está registrada.")
        
        elif opcion == '2':
            nombre_casa = input("Ingrese el nombre de la casa: ")
            if nombre_casa in casas:
                nombre_habitacion = input("Ingrese el nombre de la nueva habitación: ")
                indice_casa = casas.index(nombre_casa)
                if nombre_habitacion in habitaciones[indice_casa]:
                    print(f"Ya existe una habitación llamada '{nombre_habitacion}' en la casa '{nombre_casa}'.")
                else:
                    habitaciones[indice_casa].append(nombre_habitacion)
                    print(f"Habitación '{nombre_habitacion}' agregada exitosamente a la casa '{nombre_casa}'.")
            else:
                print("La casa no está registrada.")
        
        elif opcion == '3':
            break
        
        else:
            print("Opción no válida. Inténtelo de nuevo.")

# Funciones relacionadas con las cerraduras

def gestionar_cerraduras():
    while True:
        print("\nGestión de Cerraduras")
        print("1. Mostrar cerraduras")
        print("2. Registrar nueva cerradura")
        print("3. Volver al menú principal")
        
        opcion = input("Seleccione una opción: ")

        if opcion == '1':
            if cerraduras:
                print("Cerraduras registradas:")
                for cerradura in cerraduras:
                    print(f"- {cerradura['nombre']} (Estado: {cerradura['estado']}, Código: {cerradura['codigo']})")
            else:
                print("No hay cerraduras registradas.")
        
        elif opcion == '2':
            nombre_cerradura = input("Ingrese el nombre de la cerradura: ")
            estado_cerradura = input("Ingrese el estado inicial de la cerradura (abierto/cerrado): ").lower()
            codigo_cerradura = input("Ingrese el código de apertura de la cerradura: ")

            if estado_cerradura not in ["abierto", "cerrado"]:
                print("Estado inválido. Debe ser 'abierto' o 'cerrado'.")
            else:
                cerraduras.append({'nombre': nombre_cerradura, 'estado': estado_cerradura, 'codigo': codigo_cerradura})
                print(f"Cerradura '{nombre_cerradura}' registrada exitosamente.")
        
        elif opcion == '3':
            break
        
        else:
            print("Opción no válida. Inténtelo de nuevo.")

# Funciones relacionadas con los dispositivos

# Cargar los dispositivos desde un archivo al inicio
def cargar_dispositivos():
    try:
        with open("dispositivos.txt", "r") as archivo:
            datos = json.load(archivo)
            for dispositivo, estado in datos:
                dispositivos.append(dispositivo)
                estadoDispositivos.append(estado)
    except FileNotFoundError:
        pass  # Si el archivo no existe, seguimos con las listas vacías

# Guardar los dispositivos en un archivo
def guardar_dispositivos():
    with open("dispositivos.txt", "w") as archivo:
        json.dump(list(zip(dispositivos, estadoDispositivos)), archivo)

def mostrar_dispositivos():
    if dispositivos:
        print("Dispositivos registrados:")
        for i, dispositivo in enumerate(dispositivos):
            estado = "encendido" if estadoDispositivos[i] else "apagado"
            print(f"{i + 1}. {dispositivo} (Estado: {estado})")
    else:
        print("No hay dispositivos registrados.")

def registrar_dispositivo():
    print("\nRegistro de nuevo dispositivo")
    dispositivo = input("Ingrese el nombre del dispositivo: ")
    estado_inicial = input("Ingrese el estado inicial (encendido/apagado): ").lower()
    
    if estado_inicial not in ["encendido", "apagado"]:
        print("Estado inválido. Debe ser 'encendido' o 'apagado'.")
    else:
        dispositivos.append(dispositivo)
        estadoDispositivos.append(estado_inicial == "encendido")
        print(f"Dispositivo '{dispositivo}' registrado exitosamente.\n")

def cambiar_estado_dispositivo():
    mostrar_dispositivos()
    
    if dispositivos:
        seleccion = int(input("Seleccione el número del dispositivo que desea cambiar: ")) - 1
        
        if 0 <= seleccion < len(dispositivos):
            nuevo_estado = input("Ingrese el nuevo estado (encendido/apagado): ").lower()
            
            if nuevo_estado not in ["encendido", "apagado"]:
                print("Estado inválido. Debe ser 'encendido' o 'apagado'.")
            else:
                estadoDispositivos[seleccion] = nuevo_estado == "encendido"
                print(f"El dispositivo '{dispositivos[seleccion]}' ahora está {nuevo_estado}.")
        else:
            print("Selección fuera de rango. Intente nuevamente.")
    else:
        print("No hay dispositivos registrados para cambiar su estado.")

def programar_dispositivo():
    mostrar_dispositivos()

    if dispositivos:
        seleccion = int(input("Seleccione el número del dispositivo que desea programar: ")) - 1

        if 0 <= seleccion < len(dispositivos):
            dia = input("Ingrese el día de la semana para programar (por ejemplo, lunes): ")
            hora = input("Ingrese la hora en que desea que se encienda: ")

            # Guardar la programación en el archivo
            horarioDispositivos[seleccion] = {"dia": dia, "hora": hora}
            guardar_dispositivos()  
            print(f"El dispositivo '{dispositivos[seleccion]}' ha sido programado para encender el {dia} a las {hora}.")
        else:
            print("Selección fuera de rango. Intente nuevamente.")
    else:
        print("No hay dispositivos registrados para programar.")

def gestionar_dispositivos():
    while True:
        print("\nGestión de Dispositivos")
        print("1. Mostrar dispositivos")
        print("2. Registrar nuevo dispositivo")
        print("3. Cambiar estado de un dispositivo")
        print("4. Programar dispositivo")
        print("5. Volver al menú principal")
        
        opcion = input("Seleccione una opción: ")

        if opcion == '1':
            mostrar_dispositivos()
        
        elif opcion == '2':
            registrar_dispositivo()
        
        elif opcion == '3':
            cambiar_estado_dispositivo()
        
        elif opcion == '4':
            programar_dispositivo()
        
        elif opcion == '5':
            break
        
        else:
            print("Opción no válida. Inténtelo de nuevo.")



# Función del menú principal
def menu_principal():
    while True:
        print("\nMenú Principal")
        print("1. Iniciar sesión o registrar usuario")
        print("2. Gestionar casas")
        print("3. Gestionar habitaciones")
        print("4. Gestionar dispositivos")
        print("5. Gestionar cerraduras")
        print("6. Actualizar PIN")
        print("7. Salir")
        
        opcion = input("Seleccione una opción: ")

        if opcion == '1':
            inicioSesion(usuarios)
        elif opcion == '2':
            gestionar_casas()
        elif opcion == '3':
            gestionar_habitaciones()
        elif opcion == '4':
            gestionar_dispositivos()
        elif opcion == '5':
            gestionar_cerraduras()
        elif opcion == '6':
            actualizar_pin()
        elif opcion == '7':
            print("Saliendo del sistema.")
            break
        else:
            print("Opción no válida. Inténtelo de nuevo.")

# Ejecutar el menú principal
menu_principal()
