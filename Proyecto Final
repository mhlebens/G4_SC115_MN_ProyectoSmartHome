import json

# Listas para almacenamiento en memoria
usuarios = []  
dispositivos = []
estadoDispositivos = []
casas = []
habitaciones = []

# Cargar los usuarios desde un archivo al inicio
try:
    with open("usuarios.txt", "r") as archivo:
        usuarios = json.load(archivo)
except FileNotFoundError:
    pass  # Si el archivo no existe, simplemente seguimos con la lista vacía

def registro():
    nombre = input("Ingrese su nombre: ")
    correo = input("Ingrese su correo electrónico: ")
    pin = input("Ingrese su pin: ")
    
    return nombre, correo, pin

def registrar_usuario(usuarios):
    nombre, correo, pin = registro()

    # Ver si hay registro 
    if any(usuario['nombre'] == nombre or usuario['correo'] == correo for usuario in usuarios):
        print("El usuario ya está registrado.")
    else:
        usuarios.append({'nombre': nombre, 'correo': correo, 'pin': pin})
        with open("usuarios.txt", "w") as archivo:  # Guardar los usuarios en el archivo
            json.dump(usuarios, archivo)
        print("Usuario registrado con éxito.")

# Inicio de sesión
def iniciar_sesion(usuarios):
    nombre = input("Nombre: ")
    pin = input("PIN: ")

    # Verificar si las credenciales coinciden
    for usuario in usuarios:
        if usuario['nombre'] == nombre and usuario['pin'] == pin:
            print("Inicio de sesión exitoso.")
            return True
        
    print("Nombre o PIN incorrecto.")
    return False

# Funciones relacionadas con las casas y habitaciones

# Función para mostrar las casas registradas
def mostrar_casas():
    if casas:
        print("Casas registradas:")
        for casa in casas:
            print(f"- {casa}")
    else:
        print("No hay casas registradas.")

# Función para registrar una nueva casa
def registrar_casa():
    nombre_casa = input("Ingrese el nombre de la nueva casa: ").strip()
    if nombre_casa in casas:
        print("Esta casa ya está registrada.")
    else:
        casas.append(nombre_casa)
        habitaciones.append([])  # Crear una lista vacía de habitaciones para esa casa
        print(f"Casa '{nombre_casa}' registrada exitosamente.")

# Función para mostrar las habitaciones de una casa específica
def mostrar_habitaciones():
    nombre_casa = input("Ingrese el nombre de la casa: ").strip()
    if nombre_casa in casas:
        indice_casa = casas.index(nombre_casa)
        if habitaciones[indice_casa]:
            print(f"Habitaciones en la casa '{nombre_casa}':")
            for habitacion in habitaciones[indice_casa]:
                print(f"- {habitacion}")
        else:
            print(f"La casa '{nombre_casa}' no tiene habitaciones registradas.")
    else:
        print("La casa no está registrada.")

# Función para agregar una nueva habitación a una casa
def agregar_habitacion():
    nombre_casa = input("Ingrese el nombre de la casa: ").strip()
    if nombre_casa in casas:
        nombre_habitacion = input("Ingrese el nombre de la nueva habitación: ").strip()
        indice_casa = casas.index(nombre_casa)
        if nombre_habitacion in habitaciones[indice_casa]:
            print(f"Ya existe una habitación llamada '{nombre_habitacion}' en la casa '{nombre_casa}'.")
        else:
            habitaciones[indice_casa].append(nombre_habitacion)
            print(f"Habitación '{nombre_habitacion}' agregada exitosamente a la casa '{nombre_casa}'.")
    else:
        print("La casa no está registrada.")

# Funciones relacionadas a los dispositivos

# Función para registrar un nuevo dispositivo
def registrar_dispositivo():
    try:
        print("Registro de nuevo dispositivo")
        dispositivo = input("Ingrese el nombre del dispositivo: ")
        estado_inicial = input("Ingrese el estado inicial (encendido/apagado): ").lower()
        
        if estado_inicial not in ["encendido", "apagado"]:
            raise ValueError("Estado inválido. Debe ser 'encendido' o 'apagado'.")
        
        dispositivos.append(dispositivo)
        estadoDispositivos.append(True if estado_inicial == "encendido" else False)
        
        print(f"Dispositivo {dispositivo} registrado exitosamente.\n")
        gestionar_dispositivos()
    except ValueError as e:
        print(f"Error: {e}")
        registrar_dispositivo()  # Volver a solicitar la entrada

# Función para gestionar los dispositivos
def gestionar_dispositivos():
    print("Gestión de dispositivos")
    try:
        if len(dispositivos) == 0:
            print("No hay dispositivos registrados.\n")
            registrar_dispositivo()
        else:
            for i, dispositivo in enumerate(dispositivos):
                estado = "encendido" if estadoDispositivos[i] else "apagado"
                print(f"{i + 1}. {dispositivo} se encuentra {estado}")
            
            seleccion = int(input("Seleccione un dispositivo o ingrese 0 para registrar uno nuevo: ")) - 1
            
            if seleccion == -1:
                registrar_dispositivo()
            elif 0 <= seleccion < len(dispositivos):
                cambiar_estado_dispositivo(seleccion)
            else:
                print("Error: Selección fuera de rango. Intente nuevamente.")
                gestionar_dispositivos()
    
    except ValueError:
        print("Error: Debe ingresar un número válido. Intente nuevamente.")
        gestionar_dispositivos()  # Volver a solicitar entrada al usuario

# Función para cambiar el estado de un dispositivo
def cambiar_estado_dispositivo(indice):
    try:
        nuevo_estado = input("Ingrese el nuevo estado (encendido/apagado): ").lower()
        
        if nuevo_estado not in ["encendido", "apagado"]:
            raise ValueError("Estado inválido. Debe ser 'encendido' o 'apagado'.")
        
        estadoDispositivos[indice] = True if nuevo_estado == "encendido" else False
        print(f"El dispositivo {dispositivos[indice]} ahora está {nuevo_estado}.\n")
        gestionar_dispositivos()
    
    except ValueError as e:
        print(f"Error: {e}")
        cambiar_estado_dispositivo(indice)  # Volver a solicitar la entrada

# Función del menú principal
def menu_principal():
    while True:
        print("\nMenú Principal")
        print("1. Registrar usuario")
        print("2. Iniciar sesión")
        print("3. Registrar casa")
        print("4. Mostrar casas")
        print("5. Agregar habitación a una casa")
        print("6. Mostrar habitaciones de una casa")
        print("7. Gestionar dispositivos")
        print("8. Salir")
        
        opcion = input("Seleccione una opción: ")

        if opcion == '1':
            registrar_usuario(usuarios)
        elif opcion == '2':
            if not iniciar_sesion(usuarios):
                print("Desea intentar de nuevo o registrar un nuevo usuario.")
                continuar = input("Ingrese 1 para volver a intentar o 2 para registrar un nuevo usuario: ")
                if continuar == '2':
                    registrar_usuario(usuarios)
                elif continuar == '1':
                    continue
                else:
                    print("Opción no válida.")
        elif opcion == '3':
            registrar_casa()
        elif opcion == '4':
            mostrar_casas()
        elif opcion == '5':
            agregar_habitacion()
        elif opcion == '6':
            mostrar_habitaciones()
        elif opcion == '7':
            gestionar_dispositivos()
        elif opcion == '8':
            print("Saliendo del sistema.")
            break
        else:
            print("Opción no válida. Inténtelo de nuevo.")

# Ejecutar el menú principal
menu_principal()
